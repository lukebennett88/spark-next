import { Accordion, AccordionItem } from "@spark-web/accordion";
import { Alert } from "@spark-web/alert";
import { Box } from "@spark-web/box";
import { Button } from "@spark-web/button";
import { Checkbox } from "@spark-web/checkbox";
import { Columns } from "@spark-web/columns";
import { Container } from "@spark-web/container";
import { css } from "@emotion/css";
import { Divider } from "@spark-web/divider";
import { Heading } from "@spark-web/heading";
import { Inline } from "@spark-web/inline";
import { LightBulbIcon } from "@spark-web/icon";
import { Stack } from "@spark-web/stack";
import { Text } from "@spark-web/text";
import { useTheme } from "@spark-web/theme";
import {} from "@spark-web/core";
import {} from "@spark-web/dropzone";
import {} from "@spark-web/field";
import {} from "@spark-web/fieldset";
import {} from "@spark-web/hidden";
import {} from "@spark-web/link";
import {} from "@spark-web/modal-dialog";
import {} from "@spark-web/nav-link";
import {} from "@spark-web/next-utils";
import {} from "@spark-web/radio";
import {} from "@spark-web/row";
import {} from "@spark-web/select";
import {} from "@spark-web/text-area";
import {} from "@spark-web/text-input";
import {} from "@spark-web/text-link";
import {} from "@spark-web/text-list";
import {} from "@spark-web/utils";
import Head from "next/head";

export default function Home() {
  return (
    <Container size="medium">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Stack
        as="main"
        gap="xxlarge"
        dividers
        paddingX="large"
        paddingY="xxlarge"
      >
        <Heading level="1">Kitchen Sink</Heading>
        <AccordionSection />
        <AlertSection />
        <BoxSection />
        <ButtonSection />
        <CheckboxSection />
        <ColumnsSection />
        <ContainerSection />
      </Stack>
    </Container>
  );
}

type PlaceholderProps = {
  height?: string | number;
  width?: string | number;
  label?: React.ReactNode;
  shape?: "rectangle" | "round";
};

export function Placeholder({
  label,
  width,
  height,
  shape = "rectangle",
}: PlaceholderProps) {
  const theme = useTheme();
  const minDimensions = theme.sizing.small;

  const svgStyles = css({
    position: "absolute" as const,
    width: "100%",
    height: "100%",
  });
  const lineStyles = css({
    stroke: theme.border.color.standard,
    strokeWidth: 2,
  });

  return (
    <Box
      alignItems="center"
      background="surfaceMuted"
      border="standard"
      borderRadius={shape === "round" ? "full" : undefined}
      borderWidth="large"
      display="flex"
      justifyContent="center"
      overflow="hidden"
      position="relative"
      className={css({ minHeight: minDimensions, minWidth: minDimensions })}
      style={{ width, height }}
    >
      {label ? (
        <Box paddingX="xsmall" paddingY="xxsmall">
          <Text
            align="center"
            baseline={false}
            size="small"
            tone="muted"
            weight="strong"
          >
            {label}
          </Text>
        </Box>
      ) : (
        <svg xmlns="http://www.w3.org/2000/svg" className={svgStyles}>
          <line className={lineStyles} x1={0} y1={0} x2="100%" y2="100%" />
          <line className={lineStyles} x1="100%" y1={0} x2={0} y2="100%" />
        </svg>
      )}
    </Box>
  );
}

function Section({
  children,
  heading,
}: {
  children: React.ReactNode;
  heading: string;
}) {
  return (
    <Stack gap="large">
      <Heading level="2">{heading}</Heading>
      {children}
    </Stack>
  );
}

function AccordionSection() {
  return (
    <Section heading="Accordion">
      <Accordion type="single" collapsible>
        <AccordionItem value="item-1" label="What is this?" level="4">
          <Text>This is an example accordion</Text>
        </AccordionItem>
        <AccordionItem value="item-2" label="Should I click this?" level="4">
          <Text>Yes</Text>
        </AccordionItem>
        <AccordionItem value="item-3" label="What is in it for me?" level="4">
          <Text>A nice accordion</Text>
        </AccordionItem>
      </Accordion>
    </Section>
  );
}

function AlertSection() {
  return (
    <Section heading="Alert">
      <Alert tone="caution" heading="This is a caution alert">
        Caution message
      </Alert>
      <Alert tone="positive" heading="This is a positive alert">
        Positive message
      </Alert>
      <Alert tone="info" heading="This is an info alert">
        Info message
      </Alert>
      <Alert tone="critical" heading="This is a critical alert">
        Critical message
      </Alert>
    </Section>
  );
}

function BoxSection() {
  return (
    <Section heading="Box">
      <Box display="flex">
        <Box padding="large" margin="large" background="primary">
          <Text>hi</Text>
        </Box>
        <Box padding="large" margin="large" background="primary">
          <Text>there</Text>
        </Box>
        <Box padding="large" margin="large" background="primary">
          <Text>friend</Text>
        </Box>
      </Box>
    </Section>
  );
}

function ButtonSection() {
  return (
    <Section heading="Button">
      <Stack gap="large">
        <Text weight="strong">High prominence</Text>
        <Inline gap="small">
          <Button prominence="high" tone="primary">
            <LightBulbIcon />
            Primary
          </Button>
          <Button prominence="high" tone="secondary">
            <LightBulbIcon />
            Secondary
          </Button>
          <Button prominence="high" tone="neutral">
            <LightBulbIcon />
            Neutral
          </Button>
          <Button prominence="high" tone="positive">
            <LightBulbIcon />
            Positive
          </Button>
          <Button prominence="high" tone="critical">
            <LightBulbIcon />
            Critical
          </Button>
        </Inline>
        <Divider />
        <Text weight="strong">Low prominence</Text>
        <Inline gap="small">
          <Button prominence="low" tone="primary">
            <LightBulbIcon />
            Primary
          </Button>
          <Button prominence="low" tone="secondary">
            <LightBulbIcon />
            Secondary
          </Button>
          <Button prominence="low" tone="neutral">
            <LightBulbIcon />
            Neutral
          </Button>
          <Button prominence="low" tone="positive">
            <LightBulbIcon />
            Positive
          </Button>
          <Button prominence="low" tone="critical">
            <LightBulbIcon />
            Critical
          </Button>
          <Button prominence="low" tone="caution">
            <LightBulbIcon />
            Critical
          </Button>
          <Button prominence="low" tone="info">
            <LightBulbIcon />
            Informative
          </Button>
        </Inline>
        <Divider />
        <Text weight="strong">None prominence</Text>
        <Inline gap="small">
          <Button prominence="none" tone="primary">
            <LightBulbIcon />
            Primary
          </Button>
          <Button prominence="none" tone="secondary">
            <LightBulbIcon />
            Secondary
          </Button>
          <Button prominence="none" tone="neutral">
            <LightBulbIcon />
            Neutral
          </Button>
          <Button prominence="none" tone="positive">
            <LightBulbIcon />
            Positive
          </Button>
          <Button prominence="none" tone="critical">
            <LightBulbIcon />
            Critical
          </Button>
          <Button prominence="none" tone="caution">
            <LightBulbIcon />
            Critical
          </Button>
          <Button prominence="none" tone="info">
            <LightBulbIcon />
            Informative
          </Button>
        </Inline>
      </Stack>
    </Section>
  );
}

function CheckboxSection() {
  return (
    <Section heading="Checkbox">
      <Stack gap="large">
        <Checkbox size="small" checked={false}>
          Unchecked
        </Checkbox>
        <Checkbox size="small" checked>
          Checked
        </Checkbox>
        <Checkbox size="small" disabled>
          Disabled
        </Checkbox>
        <Checkbox size="small" checked disabled>
          Checked + disabled
        </Checkbox>
        <Divider />
        <Checkbox size="medium" checked={false}>
          Unchecked
        </Checkbox>
        <Checkbox size="medium" checked>
          Checked
        </Checkbox>
        <Checkbox size="medium" disabled>
          Disabled
        </Checkbox>
        <Checkbox size="medium" checked disabled>
          Checked + disabled
        </Checkbox>
      </Stack>
    </Section>
  );
}

function ColumnsSection() {
  return (
    <Section heading="Columns">
      <Stack gap="medium" dividers>
        <Columns gap="small" alignY="top">
          <Placeholder />
          <Placeholder label="top (default)" height={64} />
          <Placeholder />
        </Columns>
        <Columns gap="small" alignY="center">
          <Placeholder />
          <Placeholder label="center" height={64} />
          <Placeholder />
        </Columns>
        <Columns gap="small" alignY="bottom">
          <Placeholder />
          <Placeholder label="bottom" height={64} />
          <Placeholder />
        </Columns>
        <Columns gap="small" alignY="stretch">
          <Placeholder />
          <Placeholder label="stretch" height={64} />
          <Placeholder />
        </Columns>
      </Stack>
    </Section>
  );
}

function ContainerSection() {
  return (
    <Section heading="Container">
      <Stack gap="large">
        <Container size="xsmall">
          <Placeholder label="xsmall" height={64} />
        </Container>
        <Container size="small">
          <Placeholder label="small" height={64} />
        </Container>
        <Container size="medium">
          <Placeholder label="medium" height={64} />
        </Container>
        <Container size="large">
          <Placeholder label="large" height={64} />
        </Container>
      </Stack>
    </Section>
  );
}
